{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLAlchemy Fields Table of Contents Installation Custom Types Installation pip install sqlalchemy-fields pip install 'sqlalchemy-fields[full]' Custom Types EmailType FileType ImageType IPAddressType URLType UUIDType from sqlalchemy import Column , Integer , create_engine from sqlalchemy.orm import Session , declarative_base from sqlalchemy_fields.types import IPAddressType Base = declarative_base () engine = create_engine ( \"sqlite:///example.db\" ) class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) ip = Column ( IPAddressType ) example = Example ( ip = \"127.0.0.1\" ) with Session ( engine ) as session : session . add ( example ) session . commit () print ( example . ip ) \"\"\" IPv4Address(\"127.0.0.1\") \"\"\"","title":"Introduction"},{"location":"#sqlalchemy-fields","text":"Table of Contents Installation Custom Types","title":"SQLAlchemy Fields"},{"location":"#installation","text":"pip install sqlalchemy-fields pip install 'sqlalchemy-fields[full]'","title":"Installation"},{"location":"#custom-types","text":"EmailType FileType ImageType IPAddressType URLType UUIDType from sqlalchemy import Column , Integer , create_engine from sqlalchemy.orm import Session , declarative_base from sqlalchemy_fields.types import IPAddressType Base = declarative_base () engine = create_engine ( \"sqlite:///example.db\" ) class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) ip = Column ( IPAddressType ) example = Example ( ip = \"127.0.0.1\" ) with Session ( engine ) as session : session . add ( example ) session . commit () print ( example . ip ) \"\"\" IPv4Address(\"127.0.0.1\") \"\"\"","title":"Custom Types"},{"location":"storages/","text":"Storage types sqlalchemy_fields.storages.StorageFile The file obect returned by the storage. name : str property File name including extension. path : str property Complete file path. size : int property File size in bytes. open () Open a file handle of the file. write ( file ) Write input file which is opened in binary mode to destination. sqlalchemy_fields.storages.StorageImage Bases: StorageFile Inherits features of StorageFile and adds image specific properties. height : int property Image height in pixels. width : int property Image width in pixels. sqlalchemy_fields.storages.FileSystemStorage Bases: BaseStorage File system storage which stores files in the local filesystem. You might want to use this with the FileType type. get_name ( name ) Get the normalized name of the file. get_path ( name ) Get full path to the file. get_size ( name ) Get file size in bytes. open ( name ) Open a file handle of the file object in binary mode. write ( file , name ) Write input file which is opened in binary mode to destination.","title":"Storages"},{"location":"storages/#storage-types","text":"","title":"Storage types"},{"location":"storages/#sqlalchemy_fields.storages.StorageFile","text":"The file obect returned by the storage.","title":"StorageFile"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageFile.name","text":"File name including extension.","title":"name"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageFile.path","text":"Complete file path.","title":"path"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageFile.size","text":"File size in bytes.","title":"size"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageFile.open","text":"Open a file handle of the file.","title":"open()"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageFile.write","text":"Write input file which is opened in binary mode to destination.","title":"write()"},{"location":"storages/#sqlalchemy_fields.storages.StorageImage","text":"Bases: StorageFile Inherits features of StorageFile and adds image specific properties.","title":"StorageImage"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageImage.height","text":"Image height in pixels.","title":"height"},{"location":"storages/#sqlalchemy_fields.storages.base.StorageImage.width","text":"Image width in pixels.","title":"width"},{"location":"storages/#sqlalchemy_fields.storages.FileSystemStorage","text":"Bases: BaseStorage File system storage which stores files in the local filesystem. You might want to use this with the FileType type.","title":"FileSystemStorage"},{"location":"storages/#sqlalchemy_fields.storages.filesystem.FileSystemStorage.get_name","text":"Get the normalized name of the file.","title":"get_name()"},{"location":"storages/#sqlalchemy_fields.storages.filesystem.FileSystemStorage.get_path","text":"Get full path to the file.","title":"get_path()"},{"location":"storages/#sqlalchemy_fields.storages.filesystem.FileSystemStorage.get_size","text":"Get file size in bytes.","title":"get_size()"},{"location":"storages/#sqlalchemy_fields.storages.filesystem.FileSystemStorage.open","text":"Open a file handle of the file object in binary mode.","title":"open()"},{"location":"storages/#sqlalchemy_fields.storages.filesystem.FileSystemStorage.write","text":"Write input file which is opened in binary mode to destination.","title":"write()"},{"location":"types/","text":"SQLAlchemy Field Types This package provides some useful common types which are not available in SQLAlchemy. sqlalchemy_fields.types.EmailType Bases: TypeDecorator Email type with validation using email-validator package. Usage from sqlalchemy_fields.types import EmailType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) email = Column ( EmailType ()) billing_email = Column ( EmailType ( length = 128 )) sqlalchemy_fields.types.FileType Bases: TypeDecorator File type to be used with Storage classes. Stores the file path in the column. Usage from sqlalchemy_fields.storages import FileSystemStorage from sqlalchemy_fields.types import FileType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) file = Column ( FileType ( storage = FileSystemStorage ( path = \"/tmp\" ))) sqlalchemy_fields.types.ImageType Bases: TypeDecorator Image type using PIL package to be used with Storage classes. Stores the image path in the column. Usage from sqlalchemy_fields.storages import FileSystemStorage from sqlalchemy_fields.types import ImageType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) image = Column ( ImageType ( storage = FileSystemStorage ( path = \"/tmp\" ))) sqlalchemy_fields.types.IPAddressType Bases: TypeDecorator IPAddress type supporting both IPv4 and IPv6 using standard library's ipaddress module. Uses PostgreSQL's INET type, otherwise uses CHAR(39), storing as string values. Usage from sqlalchemy_fields.types import IPAddressType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) ip = Column ( IPAddressType ()) sqlalchemy_fields.types.URLType Bases: TypeDecorator URL type with validation using Python standard library. Usage from sqlalchemy_fields.types import URLType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) url = Column ( URLType ()) website = Column ( URLType ( length = 1024 )) sqlalchemy_fields.types.UUIDType Bases: TypeDecorator Platform-independent UUID type. Uses PostgreSQL's UUID type, otherwise uses CHAR(32), storing as stringified hex values. Accepts both string and UUID objects as input. Usage from sqlalchemy_fields.types import UUIDType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) uuid = Column ( UUIDType ())","title":"Types"},{"location":"types/#sqlalchemy-field-types","text":"This package provides some useful common types which are not available in SQLAlchemy.","title":"SQLAlchemy Field Types"},{"location":"types/#sqlalchemy_fields.types.EmailType","text":"Bases: TypeDecorator Email type with validation using email-validator package. Usage from sqlalchemy_fields.types import EmailType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) email = Column ( EmailType ()) billing_email = Column ( EmailType ( length = 128 ))","title":"EmailType"},{"location":"types/#sqlalchemy_fields.types.FileType","text":"Bases: TypeDecorator File type to be used with Storage classes. Stores the file path in the column. Usage from sqlalchemy_fields.storages import FileSystemStorage from sqlalchemy_fields.types import FileType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) file = Column ( FileType ( storage = FileSystemStorage ( path = \"/tmp\" )))","title":"FileType"},{"location":"types/#sqlalchemy_fields.types.ImageType","text":"Bases: TypeDecorator Image type using PIL package to be used with Storage classes. Stores the image path in the column. Usage from sqlalchemy_fields.storages import FileSystemStorage from sqlalchemy_fields.types import ImageType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) image = Column ( ImageType ( storage = FileSystemStorage ( path = \"/tmp\" )))","title":"ImageType"},{"location":"types/#sqlalchemy_fields.types.IPAddressType","text":"Bases: TypeDecorator IPAddress type supporting both IPv4 and IPv6 using standard library's ipaddress module. Uses PostgreSQL's INET type, otherwise uses CHAR(39), storing as string values. Usage from sqlalchemy_fields.types import IPAddressType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) ip = Column ( IPAddressType ())","title":"IPAddressType"},{"location":"types/#sqlalchemy_fields.types.URLType","text":"Bases: TypeDecorator URL type with validation using Python standard library. Usage from sqlalchemy_fields.types import URLType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) url = Column ( URLType ()) website = Column ( URLType ( length = 1024 ))","title":"URLType"},{"location":"types/#sqlalchemy_fields.types.UUIDType","text":"Bases: TypeDecorator Platform-independent UUID type. Uses PostgreSQL's UUID type, otherwise uses CHAR(32), storing as stringified hex values. Accepts both string and UUID objects as input. Usage from sqlalchemy_fields.types import UUIDType class Example ( Base ): __tablename__ = \"example\" id = Column ( Integer , primary_key = True ) uuid = Column ( UUIDType ())","title":"UUIDType"}]}